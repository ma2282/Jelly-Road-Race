// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(3)
            {
                { typeof(global::System.Collections.Generic.List<global::Game.Gameplay.SkinType>), 0 },
                { typeof(global::Game.Gameplay.SkinType), 1 },
                { typeof(global::Game.Gameplay.SaveData), 2 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::Game.Gameplay.SkinType>();
                case 1: return new MessagePack.Formatters.Game.Gameplay.SkinTypeFormatter();
                case 2: return new MessagePack.Formatters.Game.Gameplay.SaveDataFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Game.Gameplay
{

    public sealed class SkinTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Game.Gameplay.SkinType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Game.Gameplay.SkinType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Game.Gameplay.SkinType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Game.Gameplay.SkinType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Game.Gameplay
{
    public sealed class SaveDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Game.Gameplay.SaveData>
    {
        // Coins
        private static global::System.ReadOnlySpan<byte> GetSpan_Coins() => new byte[1 + 5] { 165, 67, 111, 105, 110, 115 };
        // RecordScore
        private static global::System.ReadOnlySpan<byte> GetSpan_RecordScore() => new byte[1 + 11] { 171, 82, 101, 99, 111, 114, 100, 83, 99, 111, 114, 101 };
        // Skins
        private static global::System.ReadOnlySpan<byte> GetSpan_Skins() => new byte[1 + 5] { 165, 83, 107, 105, 110, 115 };
        // SkinNow
        private static global::System.ReadOnlySpan<byte> GetSpan_SkinNow() => new byte[1 + 7] { 167, 83, 107, 105, 110, 78, 111, 119 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Game.Gameplay.SaveData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Coins());
            writer.Write(value.Coins);
            writer.WriteRaw(GetSpan_RecordScore());
            writer.Write(value.RecordScore);
            writer.WriteRaw(GetSpan_Skins());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Game.Gameplay.SkinType>>(formatterResolver).Serialize(ref writer, value.Skins, options);
            writer.WriteRaw(GetSpan_SkinNow());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Game.Gameplay.SkinType>(formatterResolver).Serialize(ref writer, value.SkinNow, options);
        }

        public global::Game.Gameplay.SaveData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Game.Gameplay.SaveData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 495773642563UL:
                                ____result.Coins = reader.ReadInt32();
                                continue;
                            case 495773641555UL:
                                ____result.Skins = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Game.Gameplay.SkinType>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RecordScore().Slice(1))) { goto FAIL; }

                        ____result.RecordScore = reader.ReadInt32();
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 33617904879102803UL) { goto FAIL; }

                        ____result.SkinNow = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Game.Gameplay.SkinType>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

